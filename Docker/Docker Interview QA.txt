** Introduction to Docker:
Docker is a very popular and powerful open-source containerization platform that is used for building, deploying, and running applications. Docker allows you to decouple the application/software from the underlying infrastructure.

** Can you tell something about docker container?
In simplest terms, docker containers consist of applications and all their dependencies.
They share the kernel and system resources with other containers and run as isolated systems in the host operating system.
The main aim of docker containers is to get rid of the infrastructure dependency while deploying and running applications. This means that any containerized application can run on any platform irrespective of the infrastructure being used beneath.
Technically, they are just the runtime instances of docker images.

** What are docker images?
They are executable packages(bundled with application code & dependencies, software packages, etc.) for the purpose of creating containers. Docker images can be deployed to any docker environment and the containers can be spun up there to run the application.

** What is a DockerFile?
It is a text file that has all commands which need to be run for building a given image.

** Can you tell what is the functionality of a hypervisor?
A hypervisor is a software that makes virtualization happen because of which is sometimes referred to as the Virtual Machine Monitor. This divides the resources of the host system and allocates them to each guest environment installed.
This means that multiple OS can be installed on a single host system. Hypervisors are of 2 types:

1. Native Hypervisor: This type is also called a Bare-metal Hypervisor and runs directly on the underlying host system which also ensures direct access to the host hardware which is why it does not require base OS.
2. Hosted Hypervisor: This type makes use of the underlying host operating system which has the existing OS installed.

** What can you tell about Docker Compose?
It is a YAML file consisting of all the details regarding various services, networks, and volumes that are needed for setting up the Docker-based application. So, docker-compose is used for creating multiple containers, host them and establish communication between them. For the purpose of communication amongst the containers, ports are exposed by each and every container.

** Can you tell something about docker namespace?
A namespace is basically a Linux feature that ensures OS resources partition in a mutually exclusive manner. This forms the core concept behind containerization as namespaces introduce a layer of isolation amongst the containers. In docker, the namespaces ensure that the containers are portable and they don't affect the underlying host. Examples for namespace types that are currently being supported by Docker – PID, Mount, User, Network, IPC.

** What is the docker command that lists the status of all docker containers?
In order to get the status of all the containers, we run the below command: docker ps -a

** On what circumstances will you lose data stored in a container?
The data of a container remains in it until and unless you delete the container.

** What is docker image registry?
A Docker image registry, in simple terms, is an area where the docker images are stored. Instead of converting the applications to containers each and every time, a developer can directly use the images stored in the registry.
This image registry can either be public or private and Docker hub is the most popular and famous public registry available.

** How many Docker components are there?
There are three docker components, they are - Docker Client, Docker Host, and Docker Registry.

Docker Client: This component performs “build” and “run” operations for the purpose of opening communication with the docker host.
We can make Dockerfile here, all the push and pull command are used here and also docker container creating command are used here.

Docker Host: This component has the main docker daemon and hosts containers and their associated images. The daemon establishes a connection with the docker registry.
Docker host or docker daemon is a component where docker container can be used.

Docker Registry: This component stores the docker images. There can be a public registry or a private one. The most famous public registries are Docker Hub and Docker Cloud.
It is a marketplace where we can get images and e can upload our own images. It is Docker Hub.

** What is a Docker Hub?
It is a public cloud-based registry provided by Docker for storing public images of the containers along with the provision of finding and sharing them.
The images can be pushed to Docker Hub through the docker push command.

** Can a paused container be removed from Docker?
No, it is not possible! A container MUST be in the stopped state before we can remove it.

** Differentiate between COPY and ADD commands that are used in a Dockerfile?
Both the commands have similar functionality, but COPY is more preferred because of its higher transparency level than that of ADD.
COPY provides just the basic support of copying local files into the container whereas ADD provides additional features like remote URL and tar extraction support.

** Can you tell the differences between a docker Image and Layer?
Image: This is built up from a series of read-only layers of instructions. An image corresponds to the docker container and is used for speedy operation due to the caching mechanism of each step.

Layer: Each layer corresponds to an instruction of the image’s Dockerfile. In simple words, the layer is also an image but it is the image of the instructions run.

** Where are docker volumes stored in docker?
Volumes are created and managed by Docker and cannot be accessed by non-docker entities. They are stored in Docker host filesystem at /var/lib/docker/volumes/

**  Can we use JSON instead of YAML while developing docker-compose file in Docker?
Yes! It can be used. In order to run docker-compose with JSON, docker-compose -f docker-compose.json up can be used.

** How many containers you can run in docker and what are the factors influencing this limit?
There is no clearly defined limit to the number of containers that can be run within docker. But it all depends on the limitations - more specifically hardware restrictions. The size of the app and the CPU resources available are 2 important factors influencing this limit. In case your application is not very big and you have abundant CPU resources, then we can run a huge number of containers.

** Describe the lifecycle of Docker Container?
The different stages of the docker container from the start of creating it to its end are called the docker container life cycle. 
The most important stages are:

Created: This is the state where the container has just been created new but not started yet.
Running: In this state, the container would be running with all its associated processes.
Paused: This state happens when the running container has been paused.
Stopped: This state happens when the running container has been stopped.
Deleted: In this, the container is in a dead state.

** How to use docker for multiple application environments?
Docker-compose feature of docker will come to help here. In the docker-compose file, we can define multiple services, networks, and containers along with the volume mapping in a clean manner, and then we can just call the command “docker-compose up”.
When there are multiple environments involved - it can be either dev, staging, uat, or production servers, we would want to define the server-specific dependencies and processes for running the application. In this case, we can go ahead with creating environment-specific docker-compose files of the name “docker-compose.{environment}.yml” and then based on the environment, we can set up and run the application.



Docker Interview MCQs
1.What command is used for stopping a running container?
=> docker kill <container_id>

2. What command is used for running images as a container?
=> sudo docker run -i -t alpine /bin/bash

3.What is a cloud-hosted service of Docker providing registry capabilities for public and private content?
=> Docker Hub

4. What is used for converting a pool of Docker hosts into a single, virtual Docker host?
=> Docker Swarm

5. What command is used for viewing all running containers?
=> docker ps

6. What is a template used for describing a build of an image?
=> DockerFile

7. Multiple containers running on a single machine all share the same resources such as the operating system kernel for instant boot and efficient utilization of RAM. True or False?
=> True

8. What is the default IP address of the Docker host?
=> 172.17. 0.0/16

9. What command is used to go inside a running container?
=> docker exec -it <container_id> sh

10. What command is used for remove all stopped containers, unused networks, build caches, and dangling images?
=> docker system prune